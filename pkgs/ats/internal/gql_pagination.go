// Code generated by ent, DO NOT EDIT.

package internal

import (
	"context"
	"errors"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/google/uuid"
	"github.com/pulkitbhardwaj/omega/pkgs/ats/internal/candidate"
	"github.com/pulkitbhardwaj/omega/pkgs/ats/internal/position"
	"github.com/pulkitbhardwaj/omega/pkgs/ats/internal/skill"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[uuid.UUID]
	PageInfo       = entgql.PageInfo[uuid.UUID]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// CandidateEdge is the edge representation of Candidate.
type CandidateEdge struct {
	Node   *Candidate `json:"node"`
	Cursor Cursor     `json:"cursor"`
}

// CandidateConnection is the connection containing edges to Candidate.
type CandidateConnection struct {
	Edges      []*CandidateEdge `json:"edges"`
	PageInfo   PageInfo         `json:"pageInfo"`
	TotalCount int              `json:"totalCount"`
}

func (c *CandidateConnection) build(nodes []*Candidate, pager *candidatePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Candidate
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Candidate {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Candidate {
			return nodes[i]
		}
	}
	c.Edges = make([]*CandidateEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CandidateEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CandidatePaginateOption enables pagination customization.
type CandidatePaginateOption func(*candidatePager) error

// WithCandidateOrder configures pagination ordering.
func WithCandidateOrder(order *CandidateOrder) CandidatePaginateOption {
	if order == nil {
		order = DefaultCandidateOrder
	}
	o := *order
	return func(pager *candidatePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCandidateOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCandidateFilter configures pagination filter.
func WithCandidateFilter(filter func(*CandidateQuery) (*CandidateQuery, error)) CandidatePaginateOption {
	return func(pager *candidatePager) error {
		if filter == nil {
			return errors.New("CandidateQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type candidatePager struct {
	reverse bool
	order   *CandidateOrder
	filter  func(*CandidateQuery) (*CandidateQuery, error)
}

func newCandidatePager(opts []CandidatePaginateOption, reverse bool) (*candidatePager, error) {
	pager := &candidatePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCandidateOrder
	}
	return pager, nil
}

func (p *candidatePager) applyFilter(query *CandidateQuery) (*CandidateQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *candidatePager) toCursor(c *Candidate) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *candidatePager) applyCursors(query *CandidateQuery, after, before *Cursor) (*CandidateQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCandidateOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *candidatePager) applyOrder(query *CandidateQuery) *CandidateQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCandidateOrder.Field {
		query = query.Order(DefaultCandidateOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *candidatePager) orderExpr(query *CandidateQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCandidateOrder.Field {
			b.Comma().Ident(DefaultCandidateOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Candidate.
func (c *CandidateQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CandidatePaginateOption,
) (*CandidateConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCandidatePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CandidateConnection{Edges: []*CandidateEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = c.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CandidateOrderField defines the ordering field of Candidate.
type CandidateOrderField struct {
	// Value extracts the ordering value from the given Candidate.
	Value    func(*Candidate) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) candidate.OrderOption
	toCursor func(*Candidate) Cursor
}

// CandidateOrder defines the ordering of Candidate.
type CandidateOrder struct {
	Direction OrderDirection       `json:"direction"`
	Field     *CandidateOrderField `json:"field"`
}

// DefaultCandidateOrder is the default ordering of Candidate.
var DefaultCandidateOrder = &CandidateOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CandidateOrderField{
		Value: func(c *Candidate) (ent.Value, error) {
			return c.ID, nil
		},
		column: candidate.FieldID,
		toTerm: candidate.ByID,
		toCursor: func(c *Candidate) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Candidate into CandidateEdge.
func (c *Candidate) ToEdge(order *CandidateOrder) *CandidateEdge {
	if order == nil {
		order = DefaultCandidateOrder
	}
	return &CandidateEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// PositionEdge is the edge representation of Position.
type PositionEdge struct {
	Node   *Position `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// PositionConnection is the connection containing edges to Position.
type PositionConnection struct {
	Edges      []*PositionEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *PositionConnection) build(nodes []*Position, pager *positionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Position
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Position {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Position {
			return nodes[i]
		}
	}
	c.Edges = make([]*PositionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PositionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PositionPaginateOption enables pagination customization.
type PositionPaginateOption func(*positionPager) error

// WithPositionOrder configures pagination ordering.
func WithPositionOrder(order *PositionOrder) PositionPaginateOption {
	if order == nil {
		order = DefaultPositionOrder
	}
	o := *order
	return func(pager *positionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPositionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPositionFilter configures pagination filter.
func WithPositionFilter(filter func(*PositionQuery) (*PositionQuery, error)) PositionPaginateOption {
	return func(pager *positionPager) error {
		if filter == nil {
			return errors.New("PositionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type positionPager struct {
	reverse bool
	order   *PositionOrder
	filter  func(*PositionQuery) (*PositionQuery, error)
}

func newPositionPager(opts []PositionPaginateOption, reverse bool) (*positionPager, error) {
	pager := &positionPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPositionOrder
	}
	return pager, nil
}

func (p *positionPager) applyFilter(query *PositionQuery) (*PositionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *positionPager) toCursor(po *Position) Cursor {
	return p.order.Field.toCursor(po)
}

func (p *positionPager) applyCursors(query *PositionQuery, after, before *Cursor) (*PositionQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPositionOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *positionPager) applyOrder(query *PositionQuery) *PositionQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPositionOrder.Field {
		query = query.Order(DefaultPositionOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *positionPager) orderExpr(query *PositionQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPositionOrder.Field {
			b.Comma().Ident(DefaultPositionOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Position.
func (po *PositionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PositionPaginateOption,
) (*PositionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPositionPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if po, err = pager.applyFilter(po); err != nil {
		return nil, err
	}
	conn := &PositionConnection{Edges: []*PositionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = po.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if po, err = pager.applyCursors(po, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		po.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := po.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	po = pager.applyOrder(po)
	nodes, err := po.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// PositionOrderField defines the ordering field of Position.
type PositionOrderField struct {
	// Value extracts the ordering value from the given Position.
	Value    func(*Position) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) position.OrderOption
	toCursor func(*Position) Cursor
}

// PositionOrder defines the ordering of Position.
type PositionOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *PositionOrderField `json:"field"`
}

// DefaultPositionOrder is the default ordering of Position.
var DefaultPositionOrder = &PositionOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PositionOrderField{
		Value: func(po *Position) (ent.Value, error) {
			return po.ID, nil
		},
		column: position.FieldID,
		toTerm: position.ByID,
		toCursor: func(po *Position) Cursor {
			return Cursor{ID: po.ID}
		},
	},
}

// ToEdge converts Position into PositionEdge.
func (po *Position) ToEdge(order *PositionOrder) *PositionEdge {
	if order == nil {
		order = DefaultPositionOrder
	}
	return &PositionEdge{
		Node:   po,
		Cursor: order.Field.toCursor(po),
	}
}

// SkillEdge is the edge representation of Skill.
type SkillEdge struct {
	Node   *Skill `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// SkillConnection is the connection containing edges to Skill.
type SkillConnection struct {
	Edges      []*SkillEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *SkillConnection) build(nodes []*Skill, pager *skillPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Skill
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Skill {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Skill {
			return nodes[i]
		}
	}
	c.Edges = make([]*SkillEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &SkillEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// SkillPaginateOption enables pagination customization.
type SkillPaginateOption func(*skillPager) error

// WithSkillOrder configures pagination ordering.
func WithSkillOrder(order *SkillOrder) SkillPaginateOption {
	if order == nil {
		order = DefaultSkillOrder
	}
	o := *order
	return func(pager *skillPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultSkillOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithSkillFilter configures pagination filter.
func WithSkillFilter(filter func(*SkillQuery) (*SkillQuery, error)) SkillPaginateOption {
	return func(pager *skillPager) error {
		if filter == nil {
			return errors.New("SkillQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type skillPager struct {
	reverse bool
	order   *SkillOrder
	filter  func(*SkillQuery) (*SkillQuery, error)
}

func newSkillPager(opts []SkillPaginateOption, reverse bool) (*skillPager, error) {
	pager := &skillPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultSkillOrder
	}
	return pager, nil
}

func (p *skillPager) applyFilter(query *SkillQuery) (*SkillQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *skillPager) toCursor(s *Skill) Cursor {
	return p.order.Field.toCursor(s)
}

func (p *skillPager) applyCursors(query *SkillQuery, after, before *Cursor) (*SkillQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultSkillOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *skillPager) applyOrder(query *SkillQuery) *SkillQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultSkillOrder.Field {
		query = query.Order(DefaultSkillOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *skillPager) orderExpr(query *SkillQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultSkillOrder.Field {
			b.Comma().Ident(DefaultSkillOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Skill.
func (s *SkillQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...SkillPaginateOption,
) (*SkillConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newSkillPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if s, err = pager.applyFilter(s); err != nil {
		return nil, err
	}
	conn := &SkillConnection{Edges: []*SkillEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = s.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if s, err = pager.applyCursors(s, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		s.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := s.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	s = pager.applyOrder(s)
	nodes, err := s.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// SkillOrderField defines the ordering field of Skill.
type SkillOrderField struct {
	// Value extracts the ordering value from the given Skill.
	Value    func(*Skill) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) skill.OrderOption
	toCursor func(*Skill) Cursor
}

// SkillOrder defines the ordering of Skill.
type SkillOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *SkillOrderField `json:"field"`
}

// DefaultSkillOrder is the default ordering of Skill.
var DefaultSkillOrder = &SkillOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &SkillOrderField{
		Value: func(s *Skill) (ent.Value, error) {
			return s.ID, nil
		},
		column: skill.FieldID,
		toTerm: skill.ByID,
		toCursor: func(s *Skill) Cursor {
			return Cursor{ID: s.ID}
		},
	},
}

// ToEdge converts Skill into SkillEdge.
func (s *Skill) ToEdge(order *SkillOrder) *SkillEdge {
	if order == nil {
		order = DefaultSkillOrder
	}
	return &SkillEdge{
		Node:   s,
		Cursor: order.Field.toCursor(s),
	}
}
